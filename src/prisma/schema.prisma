generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id_user     String        @id @default(uuid())
  nama        String
  email       String        @unique
  password    String?
  no_wa       String?
  role        Role
  resetToken      String?       
  resetTokenExp   DateTime?  
  
  responAdmin ResponAdmin[]
  komentar Komentar[]
}

enum Role{
  ADMIN
  USER
}

model Banner{
  id_banner   String @id @default(uuid())
  gambar      String
}
model LayananUnggulan {
  id_layanan_unggulan String         @id @default(uuid())
  judul               String
  deskripsi           String
  gambarCaptions      GambarCaption[] 
}

model GambarCaption {
  id           String           @id @default(uuid())
  gambar       String
  nama_file    String  
  caption      String
  layananId    String
  layanan      LayananUnggulan @relation(fields: [layananId], references: [id_layanan_unggulan])
}

model Berita {
  id_berita       String   @id @default(uuid())
  judul           String
  ringkasan       String
  isi             String
  gambar_sampul   String
  createdAt       DateTime @default(now())
  gambar_tambahan Gambar[]
  komentar Komentar[]
}
model EmbedIg{
  id_embed String @id @default(uuid())
  link_embed String 
  createdAt DateTime @default(now())
}

model Komentar {
  id_komentar String @id @default(uuid())
  nama String
  no_wa String
  isi_komentar String
  isVisible Boolean @default(false)
  berita_id String
  user_id String?

  
  // Self-reference untuk reply komentar
  parentId       String?       
  parent         Komentar?     @relation("KomentarParent", fields: [parentId], references: [id_komentar])
  replies        Komentar[]    @relation("KomentarParent")

  berita Berita @relation(fields: [berita_id], references: [id_berita])
  user User? @relation(fields: [user_id], references: [id_user])
  createdAt DateTime @default(now())

}

model Gambar {
  id       String @id @default(uuid())
  url      String
  beritaId String
  berita   Berita @relation(fields: [beritaId], references: [id_berita], onDelete: Cascade)
}

model Aduan {
  id_aduan    String        @id @default(uuid())
  nama       String
  message   String
  no_wa       String
  is_visible Boolean    @default(false)
  createdAt   DateTime      @default(now())
  responAdmin ResponAdmin[]
}
model Postingan {
  id                 Int      @id @default(autoincrement())
  caption            String
  image_url          String
  post_to_instagram  Boolean  @default(false)
  instagram_post_status String? // Bisa berisi "SUCCESS", "FAILED", atau null
  created_at         DateTime @default(now())
}


model ResponAdmin {
  id_respon_admin String   @id @default(uuid())
  message         String
  createdAt       DateTime @default(now())
  id_user         String
  id_aduan        String
  aduan           Aduan    @relation(fields: [id_aduan], references: [id_aduan], onDelete: Cascade)
  user            User     @relation(fields: [id_user], references: [id_user])
}

model Pelayanan {
  id_pelayanan   String         @id @default(uuid())
  nama_pelayanan String
  Persyaratan    String
  Prosedur       String
  JangkaWaktu    String
  Biaya          Float
  jadwaldokter   JadwalDokter[]
}

model Dokter {
  id_dokter    String         @id @default(uuid())
  nama         String
  gambar       String?
  biodata_singkat String
  link_instagram String?
  link_linkedin  String?
  link_facebook  String?
  id_poli      String
  
  poli         Poli           @relation(fields: [id_poli], references: [id_poli])
  jadwalDokter JadwalDokter[]
}

model Poli {
  id_poli   String   @id @default(uuid())
  nama_poli String 
  dokter    Dokter[]
}

model JadwalDokter {
  id_jadwal_dokter String    @id @default(uuid())
  id_dokter        String
  hari             Hari
  sesi             String
  jam_mulai        String
  jam_selesai      String
  id_pelayanan     String
  dokter           Dokter    @relation(fields: [id_dokter], references: [id_dokter], onDelete: Cascade)
  pelayanan        Pelayanan @relation(fields: [id_pelayanan], references: [id_pelayanan])
}

enum Hari {
  Senin
  Selasa
  Rabu
  Kamis
  Jumat
  Sabtu
  Minggu
}
